{"version":3,"sources":["components/TableData/TableData.js","containers/RecordPage/RecordPage.js"],"names":["StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","useStyles","makeStyles","formControl","margin","spacing","minWidth","mgTop","marginTop","center","textAlign","button","display","table","TableData","props","classes","component","Paper","className","size","aria-label","align","rows","length","map","row","key","date","scope","name","information","connect","state","role","userId","authRedirectPath","token","React","useState","labelWidth","setLabelWidth","inputLabel","useRef","loading","setLoading","error","setError","patientId","setPatientId","patientList","setPatientList","patientRecords","setPatientRecords","getPatientList","useCallback","a","axios","get","GET_ALLOWED_LIST_URL","patientIDs","updatedList","data","status","i","DATABASE_URL","id","infor","user","userName","console","log","push","message","toString","useEffect","current","offsetWidth","getPatientRecords","GET_MEDICAL_INFO_URL","medicalInfo","variant","ref","labelId","value","onChange","e","target","handleChange","patient","disabled","onClick","Fragment"],"mappings":"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","file":"static/js/12.69758add.chunk.js","sourcesContent":["import React from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.background.default\n    }\n  }\n}))(TableRow);\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: \"90%\"\n  },\n  mgTop: {\n    marginTop: theme.spacing(2)\n  },\n  center: {\n    textAlign: \"center\"\n  },\n  button: {\n    margin: \"2rem auto\",\n    display: \"block\"\n  },\n  table: {\n    minWidth: 700\n  }\n}));\nfunction TableData(props) {\n  const classes = useStyles();\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Doctor Name</StyledTableCell>\n            <StyledTableCell align=\"center\">Date</StyledTableCell>\n            <StyledTableCell align=\"center\">Treatment Info</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.rows.length > 0 &&\n            props.rows.map(row => (\n              <StyledTableRow key={row.date}>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">{row.date}</StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  {row.information}\n                </StyledTableCell>\n              </StyledTableRow>\n            ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport default TableData;\n","import React, { useState, useCallback } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Button from \"@material-ui/core/Button\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport TableData from \"../../components/TableData/TableData\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport {\n  GET_ALLOWED_LIST_URL,\n  GET_MEDICAL_INFO_URL,\n  DATABASE_URL\n} from \"../../api\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: \"90%\"\n  },\n  mgTop: {\n    marginTop: theme.spacing(2)\n  },\n  center: {\n    textAlign: \"center\"\n  },\n  button: {\n    margin: \"2rem auto\",\n    display: \"block\"\n  },\n  table: {\n    minWidth: 700\n  }\n}));\nfunction RecordPage(props) {\n  const classes = useStyles();\n  const [labelWidth, setLabelWidth] = React.useState(0);\n  const inputLabel = React.useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [patientId, setPatientId] = useState(\"\");\n  const [patientList, setPatientList] = React.useState([]);\n  const [patientRecords, setPatientRecords] = React.useState([]);\n  const getPatientList = useCallback(async () => {\n    setLoading(true);\n    const patientIDs = await axios.get(\n      `${GET_ALLOWED_LIST_URL}?id=${props.userId}`\n    );\n    const updatedList = [];\n    try {\n      if (patientIDs.data.status === \"success\") {\n        for (let i = 0; i < patientIDs.data.data.length; i++) {\n          const infor = await axios.get(\n            `${DATABASE_URL}/information.json?auth=${props.token}&orderBy=\"userId\"&equalTo=\"${patientIDs.data.data[i].id}\"`\n          );\n          for (let key in infor.data) {\n            let user = {\n              ...patientIDs.data.data[i],\n              name: infor.data[key].userName\n            };\n            console.log(user);\n            updatedList.push(user);\n          }\n        }\n        setPatientList(updatedList);\n        setLoading(false);\n      } else {\n        setLoading(false);\n        setError(patientIDs.data.message);\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.toString());\n    }\n  }, [props.token, props.userId]);\n  React.useEffect(() => {\n    setLabelWidth(inputLabel.current.offsetWidth);\n    getPatientList();\n  }, [getPatientList]);\n\n  const handleChange = e => {\n    setPatientId(e.target.value);\n  };\n  const getPatientRecords = async () => {\n    setLoading(true);\n    setError(\"\");\n    setPatientRecords([]);\n    try {\n      const medicalInfo = await axios.get(\n        `${GET_MEDICAL_INFO_URL}?id=${patientId}`\n      );\n      const updatedList = [];\n      if (medicalInfo.data.status === \"success\") {\n        for (let i = 0; i < medicalInfo.data.data.length; i++) {\n          const infor = await axios.get(\n            `${DATABASE_URL}/information.json?auth=${props.token}&orderBy=\"userId\"&equalTo=\"${medicalInfo.data.data[i][\"writer_id\"]}\"`\n          );\n          for (let key in infor.data) {\n            let user = {\n              ...medicalInfo.data.data[i],\n              name: infor.data[key].userName\n            };\n            updatedList.push(user);\n          }\n        }\n        setLoading(false);\n        setPatientRecords(updatedList);\n      } else {\n        setLoading(false);\n        setError(medicalInfo.data.message);\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.toString());\n    }\n  };\n  React.useEffect(() => {}, [patientRecords]);\n  return (\n    <div className={classes.center}>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel ref={inputLabel} id=\"demo-simple-select-outlined-label\">\n          Patient ID\n        </InputLabel>\n        <Select\n          labelId=\"demo-simple-select-outlined-label\"\n          id=\"demo-simple-select-outlined\"\n          value={patientId}\n          onChange={e => handleChange(e)}\n          labelWidth={labelWidth}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          {patientList.map(patient => (\n            <MenuItem key={patient.id} value={patient.id}>\n              {patient.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <div>{error}</div>\n      <Button\n        variant=\"outlined\"\n        disabled={!patientId || patientList.length === 0}\n        color=\"secondary\"\n        className={classes.button}\n        onClick={() => getPatientRecords()}\n      >\n        Check Records\n      </Button>\n      {loading && (\n        <React.Fragment>\n          <LinearProgress variant=\"query\" className={classes.mgTop} />{\" \"}\n          <LinearProgress\n            variant=\"query\"\n            color=\"secondary\"\n            className={classes.mgTop}\n          />\n        </React.Fragment>\n      )}\n      {console.log(patientRecords.length)}\n      {patientRecords.length !== 0 && <TableData rows={patientRecords} />}\n    </div>\n  );\n}\nconst mapStateToProps = state => {\n  return {\n    role: state.role,\n    userId: state.userId,\n    authRedirectPath: state.authRedirectPath,\n    token: state.token\n  };\n};\nexport default connect(mapStateToProps)(RecordPage);\n"],"sourceRoot":""}