{"version":3,"sources":["containers/LoginPage/LoginPage.js"],"names":["useStyles","makeStyles","theme","backdrop","zIndex","drawer","color","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","center","justifyContent","connect","state","loading","error","isAuth","token","role","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","path","props","classes","useState","value","validation","required","errors","controls","setControl","inputChangeHandler","event","controlName","updatedControls","updateObject","target","checkValidity","useEffect","isValid","length","submitHandler","isSignUp","preventDefault","errorMessage","message","Fragment","to","className","open","component","maxWidth","variant","noValidate","fullWidth","id","label","name","helperText","join","onChange","autoComplete","autoFocus","type","container","item","xs","disabled","onClick","e"],"mappings":"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","file":"static/js/16.77e8137e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { checkValidity, updateObject } from \"../../shared/utility\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { Redirect } from \"react-router-dom\";\nconst useStyles = makeStyles(theme => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\"\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  center: {\n    justifyContent: \"center\"\n  }\n}));\n\nconst SignIn = props => {\n  const classes = useStyles();\n  const {\n    isAuth,\n    role,\n    loading,\n    authRedirectPath,\n    error,\n    onAuth,\n    onSetAuthRedirectPath\n  } = props;\n  const [controls, setControl] = useState({\n    email: {\n      value: \"\",\n      validation: { required: true, email: true },\n      errors: []\n    },\n    password: {\n      value: \"\",\n      validation: { required: true },\n      errors: []\n    }\n  });\n  const inputChangeHandler = (event, controlName) => {\n    const updatedControls = updateObject(controls, {\n      [controlName]: updateObject(controls[controlName], {\n        value: event.target.value,\n        errors: checkValidity(\n          event.target.value,\n          controls[controlName].validation\n        )\n      })\n    });\n    setControl(updatedControls);\n  };\n  useEffect(() => {\n    if (role) {\n      onSetAuthRedirectPath(\"/\");\n    } else {\n      onSetAuthRedirectPath(\"/role\");\n    }\n  }, [role, onSetAuthRedirectPath]);\n  const isValid =\n    !controls.email.value ||\n    !controls.password.value ||\n    controls.email.errors.length !== 0 ||\n    controls.password.errors.length !== 0;\n  const submitHandler = (event, isSignUp) => {\n    event.preventDefault();\n    onAuth(controls.email.value, controls.password.value, isSignUp);\n  };\n  let errorMessage = null;\n  if (error) {\n    errorMessage = <p>{error.message}</p>;\n  }\n  return (\n    <React.Fragment>\n      {isAuth && <Redirect to={authRedirectPath} />}\n      {loading && (\n        <Backdrop className={classes.backdrop} open={true}>\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n      )}\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Health Record\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              error={controls.email.errors.length !== 0}\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              value={controls.email.value}\n              helperText={\n                controls.email.errors.length !== 0\n                  ? controls.email.errors.join(\" & \")\n                  : \"\"\n              }\n              onChange={event => inputChangeHandler(event, \"email\")}\n              autoComplete=\"email\"\n              autoFocus\n            />\n            <TextField\n              error={controls.password.errors.length !== 0}\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              value={controls.password.value}\n              helperText={\n                controls.password.errors.length !== 0\n                  ? controls.password.errors.join(\" & \")\n                  : \"\"\n              }\n              onChange={event => inputChangeHandler(event, \"password\")}\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n            />\n            {errorMessage}\n            <Grid container spacing={3} className={classes.center}>\n              <Grid item xs={5}>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.submit}\n                  disabled={isValid}\n                  onClick={e => submitHandler(e, false)}\n                >\n                  Sign In\n                </Button>\n              </Grid>\n              <Grid item xs={5}>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  className={classes.submit}\n                  disabled={isValid}\n                  onClick={e => submitHandler(e, true)}\n                >\n                  Sign Up\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Container>\n    </React.Fragment>\n  );\n};\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    error: state.error,\n    isAuth: state.token !== null,\n    role: state.role,\n    authRedirectPath: state.authRedirectPath\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: path => dispatch(actions.setAuthRedirectPath(path))\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\n"],"sourceRoot":""}