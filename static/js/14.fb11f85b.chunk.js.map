{"version":3,"sources":["containers/DoctorPage/DoctorPage.js"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","mgTop","marginTop","center","textAlign","button","display","height","width","backgroundColor","green","color","wrapper","position","buttonProgress","top","left","marginLeft","connect","state","role","userId","authRedirectPath","token","props","classes","React","useState","labelWidth","setLabelWidth","inputLabel","useRef","loading","setLoading","error","setError","patientID","date","Date","info","patientRecord","setPatientRecord","patientList","setPatientList","getPatientList","useCallback","a","axios","get","GET_ALLOWED_LIST_URL","patientIDs","updatedList","data","status","i","length","DATABASE_URL","id","key","infor","user","name","userName","push","message","toString","useEffect","current","offsetWidth","handleChange","input","e","updatedInfo","target","value","checkValidSubmit","className","variant","ref","labelId","onChange","map","patient","label","multiline","rowsMax","utils","DateFnsUtils","disableToolbar","format","KeyboardButtonProps","disabled","onClick","put","ADD_MEDICAL_INFO_URL","then","res","catch","setTimeout","size"],"mappings":"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","file":"static/js/14.fb11f85b.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport {\n  ADD_MEDICAL_INFO_URL,\n  GET_ALLOWED_LIST_URL,\n  DATABASE_URL\n} from \"../../api\";\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker\n} from \"@material-ui/pickers\";\nimport { green } from \"@material-ui/core/colors\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: \"90%\"\n  },\n  mgTop: {\n    marginTop: theme.spacing(2)\n  },\n  center: {\n    textAlign: \"center\"\n  },\n  button: {\n    margin: \"2rem auto\",\n    display: \"block\",\n    height: \"50px\",\n    width: \"100px\",\n    backgroundColor: green[500],\n    \"&:hover\": {\n      backgroundColor: green[700]\n    },\n    color: \"white\"\n  },\n  wrapper: {\n    margin: theme.spacing(1),\n    position: \"relative\"\n  },\n  buttonProgress: {\n    color: \"white\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12\n  }\n}));\n\nfunction DoctorPage(props) {\n  const classes = useStyles();\n  const [labelWidth, setLabelWidth] = React.useState(0);\n  const inputLabel = React.useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [patientRecord, setPatientRecord] = useState({\n    patientID: \"\",\n    date: new Date(),\n    info: \"\"\n  });\n  const [patientList, setPatientList] = React.useState([]);\n  const getPatientList = useCallback(async () => {\n    setLoading(true);\n    const patientIDs = await axios.get(\n      `${GET_ALLOWED_LIST_URL}?id=${props.userId}`\n    );\n    const updatedList = [];\n    try {\n      if (patientIDs.data.status === \"success\") {\n        for (let i = 0; i < patientIDs.data.data.length; i++) {\n          const infor = await axios.get(\n            `${DATABASE_URL}/information.json?auth=${props.token}&orderBy=\"userId\"&equalTo=\"${patientIDs.data.data[i].id}\"`\n          );\n          for (let key in infor.data) {\n            let user = {\n              ...patientIDs.data.data[i],\n              name: infor.data[key].userName\n            };\n            updatedList.push(user);\n          }\n        }\n        setPatientList(updatedList);\n        setLoading(false);\n      } else {\n        setLoading(false);\n        setError(patientIDs.data.message);\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.toString());\n    }\n  }, [props.token, props.userId]);\n  React.useEffect(() => {\n    setLabelWidth(inputLabel.current.offsetWidth);\n    getPatientList();\n  }, [getPatientList]);\n\n  const handleChange = input => e => {\n    const updatedInfo = { ...patientRecord };\n    if (input === \"date\") {\n      updatedInfo[input] = e;\n    } else {\n      updatedInfo[input] = e.target.value;\n    }\n    setPatientRecord(updatedInfo);\n  };\n  const submitRecord = () => {\n    setLoading(true);\n    axios\n      .put(ADD_MEDICAL_INFO_URL, {\n        id: props.userId,\n        patientID: patientRecord.patientID,\n        info: patientRecord.info\n      })\n      .then(res => {\n        if (res.data.status === \"success\") {\n          setLoading(false);\n          setPatientRecord({ patientID: \"\", date: new Date(), info: \"\" });\n        } else {\n          setLoading(false);\n          setError(res.data.message);\n        }\n      })\n      .catch(error => {\n        setLoading(false);\n        setError(error.toString());\n      });\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n  };\n  let checkValidSubmit =\n    patientRecord.info === \"\" || patientRecord.patientID === \"\";\n  return (\n    <div className={classes.center}>\n      <div>{error}</div>\n      <h1>PRESCRIPTION</h1>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel ref={inputLabel} id=\"demo-simple-select-outlined-label\">\n          Patient ID\n        </InputLabel>\n        <Select\n          labelId=\"demo-simple-select-outlined-label\"\n          id=\"demo-simple-select-outlined\"\n          value={patientRecord.patientID}\n          onChange={handleChange(\"patientID\")}\n          labelWidth={labelWidth}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          {patientList.length !== 0 &&\n            patientList.map(patient => (\n              <MenuItem key={patient.id} value={patient.id}>\n                {patient.name}\n              </MenuItem>\n            ))}\n        </Select>\n      </FormControl>\n      <TextField\n        id=\"standard-multiline-flexible\"\n        label=\"Treatment Info\"\n        multiline\n        rowsMax=\"4\"\n        value={patientRecord.info}\n        onChange={handleChange(\"info\")}\n        className={classes.formControl}\n      />\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"dd/MM/yyyy\"\n          margin=\"normal\"\n          id=\"date-picker-inline\"\n          label=\"Date\"\n          value={patientRecord.date}\n          onChange={handleChange(\"date\")}\n          KeyboardButtonProps={{\n            \"aria-label\": \"change date\"\n          }}\n          className={classes.formControl}\n        />\n      </MuiPickersUtilsProvider>\n      <div className={classes.wrapper}>\n        <Button\n          variant=\"outlined\"\n          disabled={checkValidSubmit}\n          color=\"secondary\"\n          className={classes.button}\n          onClick={submitRecord}\n        >\n          {!loading && \"Submit\"}\n        </Button>\n        {loading && (\n          <CircularProgress size={24} className={classes.buttonProgress} />\n        )}\n      </div>\n    </div>\n  );\n}\nconst mapStateToProps = state => {\n  return {\n    role: state.role,\n    userId: state.userId,\n    authRedirectPath: state.authRedirectPath,\n    token: state.token\n  };\n};\nexport default connect(mapStateToProps)(DoctorPage);\n"],"sourceRoot":""}